# Maven
# Build your Java project and run tests with Apache Maven.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

trigger:
- master

variables:
  app_name: pipelines-java

pool:
  name: Default
  # vmImage: 'ubuntu-latest'
  demands:
   - agent.name -equals vm_mobile_workstation

stages:
# docker images | grep 'pipelines-java ' | awk '{print $3}'
- stage: Clean
  jobs:
  - job: Clean
    displayName: Clean
    pool:
      name: Default
      demands:
       - agent.name -equals vm_mobile_workstation
    steps:
      - bash:                                       
          echo "##vso[task.setvariable variable=image_id]$(docker images | grep '$(app_name) ' | awk '{print $3}')"
        name: VarDefineStep
      - script: |
              docker rm -f $(docker ps -a | grep '$(image_id)' | awk '{print $1}')  || true
              docker rmi $(image_id) || true

- stage: Build
  displayName: Build stage
  jobs:
  - job: MavenPackage
    displayName: Maven Package
    pool:
      name: Default
      # vmImage: 'ubuntu-latest'
      demands:
       - agent.name -equals vm_mobile_workstation

    steps:
    - task: Maven@3
      displayName: 'Maven Package'
      inputs:
        mavenPomFile: 'pom.xml'
        mavenOptions: '-Xmx3072m'
        javaHomeOption: 'JDKVersion'
        jdkVersionOption: '1.8'
        jdkArchitectureOption: 'x64'
        publishJUnitResults: true
        testResultsFiles: '**/surefire-reports/TEST-*.xml'
        goals: 'package'

    - task: CmdLine@2
      inputs:
        script: |
          echo  '$(System.DefaultWorkingDirectory)'
          dir
          echo  '$(Build.ArtifactStagingDirectory)'
          echo  '$(Build.ArtifactStagingDirectory)'

    - task: CopyFiles@2
      displayName: 'Copy Files to artifact staging directory'
      inputs:
        SourceFolder: '$(System.DefaultWorkingDirectory)'
        Contents: '**/target/*.?(war|jar)'
        TargetFolder: $(Build.ArtifactStagingDirectory)

    - upload: $(Build.ArtifactStagingDirectory)
      artifact: drop

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: DeployLinuxWebApp
    displayName: Deploy Linux Web App
    environment: '$(app_name)'
    pool:
      name: Default
    strategy:
      runOnce:
        deploy:
          steps:
          - task: Docker@2
            displayName: Build an image
            inputs:
              repository: '$(app_name)'
              command: build
              Dockerfile: Dockerfile
          - task: CmdLine@2            
            inputs:
              script: |
                echo  '$(System.DefaultWorkingDirectory)'
                dir
                echo  '$(Build.ArtifactStagingDirectory)'
                echo  '$(Build.ArtifactStagingDirectory)'
          - bash:                                       
                echo "##vso[task.setvariable variable=image_id]$(docker images | egrep -i '^($(app_name) )' | awk '{print $3}')"
            name: VarDefineStep
          - script: |
                docker run $(image_id)
            name: VarUseStep
          # - task: AzureWebApp@1
          #   displayName: 'Azure Web App Deploy: {{ webAppName }}'
          #   inputs:
          #     azureSubscription: $(azureSubscription)
          #     appType: webAppLinux
          #     appName: $(webAppName)
          #     package: '$(Pipeline.Workspace)/drop/**/target/*.?(war|jar)'